@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Agent" as A #RosyBrown
participant ":CreateAnnouncementUI" as UI
participant ":CreateAnnouncementController" as CTRL
participant "Announcement" as Announcement
participant "Utils" as Utils
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthenticationRepository:\n" as AuthenticationRepository
participant "PersonRepository:\n" as PersonRepository
participant "AnnouncementRepository:\n" as AnnouncementRepository

activate A

A -> UI : asks to publish an announcement
activate UI

UI -> CTRL** : create
UI -> Utils : Utils.getEmployeeInSession()
activate Utils

Utils -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> Utils: repositories
deactivate RepositorySingleton

Utils -> PLAT : getAuthenticationRepository()
activate PLAT

PLAT --> Utils: AuthenticationRepository
deactivate PLAT

Utils -> AuthenticationRepository : getCurrentUserSession().getUserId()
activate AuthenticationRepository

AuthenticationRepository --> Utils : idInSession
deactivate AuthenticationRepository

Utils -> Utils : Utils.getEmployee(idInSession)
Utils -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> Utils: repositories
deactivate RepositorySingleton

Utils -> PLAT : getPersonRepository()
activate PLAT

PLAT --> Utils: PersonRepository
deactivate PLAT

Utils -> PersonRepository : getPersonById(idInSession)
activate PersonRepository

PersonRepository --> Utils : employee
deactivate PersonRepository

Utils --> UI : employeeInSession
deactivate Utils

UI -> Utils : getClientsList()
activate Utils

Utils -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> Utils: repositories
deactivate RepositorySingleton

Utils -> PLAT : getPersonRepository()
activate PLAT

PLAT --> Utils: PersonRepository
deactivate PLAT

Utils -> PersonRepository : getClients()
activate PersonRepository

PersonRepository --> Utils : Clients
deactivate PersonRepository

Utils --> UI : ClientList
deactivate Utils

UI --> A : requests to select a Client from the list
deactivate UI

A -> UI : choose a Client
activate UI

UI --> A : requests the property type (land, apartment, house)
deactivate UI

A -> UI : types respective data
activate UI

UI --> A : request the address, area and distance from city centre
loop one or more

UI --> A : request photoURL
A -> UI : types respective data
end

UI --> A : request deal type (sale, rent)
A -> UI : types respective data
alt sale

UI --> A : request sale price
A -> UI : types respective data
UI -> UI : new SaleDTO(price)
else rent

UI --> A : request rent price and contract duration
A -> UI : types respective data
UI -> UI : new RentDTO(price, contractDuration)
end

UI -> UI : new LandDTO(address, area, distanceFromCityCenter, photoURL, Deal)
alt apartment or house

UI --> A : request the number of bedrooms, number of bathrooms and number of parking spaces
A -> UI : types requested data

loop (one or more)

UI --> A : request the available equipment
A -> UI : types requested data
end

UI -> UI : new ApartmentDTO(Land, numberOfBedrooms, numberOfBathrooms, numberOfParkingSpaces)
end

alt house

UI --> A : request if it has basement, inhabitable loft and how is the sun exposure (high, low, medium)
A -> UI : types respective data
UI -> UI : new HouseDTO(apartment, basement, inhabitableLoft, sunExposure)
end

UI -> UI : new RequestDTO(employeeInSession, client, property, false)
deactivate UI

UI --> A : request the commission type (fix amount, percentage)
activate UI

A -> UI : types respective data
alt fix amount

UI --> A : request the commission fix amount value
A -> UI : types respective data
UI -> UI : CommissionDTO(value, false)

else percentage

UI --> A : request the commission percentage value
A -> UI : types respective data
UI -> UI : CommissionDTO(value, true)
end

UI -> UI : new AnnouncementDTO(request, commission)
deactivate UI

UI --> A : show and ask to confirm
A -> UI : types respective data
activate UI

alt confirms

UI -> CTRL : publishAnnouncement(announcementDTO)
activate CTRL

CTRL -> Announcement** : create
Announcement -> Announcement : AnnouncementMapper.toModel(AnnouncementDTO)
Announcement --> CTRL : announcement
CTRL -> AnnouncementRepository : saveAnnouncement(announcement)
AnnouncementRepository -> AnnouncementRepository : validateAnnouncement(announcement)
AnnouncementRepository --> CTRL : boolean
CTRL --> UI : boolean
deactivate CTRL

alt boolean

UI -> CTRL : notifyClient(announcementDTO)
activate CTRL

CTRL -> CTRL : new Message(false, subject, announcement.getRequest().getEmployee(), announcement.getRequest().getUser(), inf)
CTRL -> CTRL : message.send()
CTRL -> CTRL : message.save()
deactivate CTRL

UI --> A : Operation success
end

else no confirms

UI --> A : Operation canceled
end

deactivate A
@enduml
